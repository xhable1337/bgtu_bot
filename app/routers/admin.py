"""app/routers/admin.py

–†–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–æ–≤.
"""

from asyncio import sleep
from html import escape

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from loguru import logger

from app.filters import IsAdminFilter
from app.keyboards import kb_admin, kb_update_teachers
from app.properties import MONGODB_URI
from app.utils.api_worker import APIWorker
from app.utils.db_worker import DBWorker
from app.utils.schedule_management import update_groups

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä
admin_router = Router()

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ –≤—Å–µ–º —Ö—ç–Ω–¥–ª–µ—Ä–∞–º –≤ —ç—Ç–æ–º —Ä–æ—É—Ç–µ—Ä–µ
admin_router.message.filter(IsAdminFilter())

db = DBWorker(MONGODB_URI)
api = APIWorker()


@admin_router.message(Command("broadcast"))
async def cmd_broadcast(message: Message):
    """### [`Command`] –ö–æ–º–∞–Ω–¥–∞ /broadcast."""
    if message.text == "/broadcast":
        return await message.answer(
            "üì® /broadcast: –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
            "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>/broadcast &lt;group|all&gt; &lt;message&gt;</code>"
        )

    group, text = message.text.split(" ", maxsplit=2)[1:3]

    i = 1
    if group == "all":
        text = "üîî <b>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø!</b>\n" + text
        for user in db._users.find():
            if i % 25 == 0:
                sleep(1)
            user_id = user["user_id"]
            try:
                await message.bot.send_message(user_id, text)
                i += 1
            except Exception as exc:
                logger.error(f"Exception caught while broadcasting to all: {exc}")
    elif group == "test":
        text = "üîî <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n" + text
        await message.answer(text)
    else:
        text = f"üîî <b>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}!</b>\n" + text
        # TODO: –í—ã–Ω–µ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        for user in db._users.find({"group": group}):
            if i == 25:
                await sleep(1)
            user_id = user["user_id"]
            try:
                await message.bot.send_message(user_id, text)
                i += 1
            except Exception as exc:
                logger.error(
                    f"Exception caught while broadcasting to group {group}: {exc}"
                )


@admin_router.message(Command("admin"))
async def cmd_admin(message: Message):
    """### [`Command`] –ö–æ–º–∞–Ω–¥–∞ /admin."""
    settings = db._settings.find_one({})
    user = db.user(message.from_user.id)
    count = db._users.count_documents({})
    maintenance_state = "üü¢ –í–∫–ª—é—á–µ–Ω—ã" if settings["maintenance"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω—ã"
    await message.answer(
        text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {escape(user.full_name)}.\n"
        f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <u>{count}</u></b>\n"
        f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Ö.—Ä–∞–±–æ—Ç: <u>{maintenance_state}</u></b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:",
        reply_markup=kb_admin,
    )


@admin_router.message(Command("update_groups"))
async def cmd_update_groups(message: Message):
    """### [`Command`] –ö–æ–º–∞–Ω–¥–∞ /update_groups."""
    if message.text == "/update_groups":
        return await message.answer(
            "üÜô /update_groups: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.\n"
            "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>/update_groups &lt;groups&gt;</code>"
        )

    # –í aiogram 3 –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ get_args(), –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞
    groups = message.text.replace("/update_groups", "").strip()
    text = "‚öô –ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø...\n\n"
    main_message = await message.answer(text)
    for group in groups.splitlines():
        schedule = api.schedule(group)
        db.add_schedule(schedule, replace=True)
        text += f"‚úî {group}\n"
        await main_message.edit_text(text)

    await main_message.edit_text(text + "\n‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")


@admin_router.message(Command("force_update"))
async def cmd_force_update(message: Message):
    """### [`Command`] –ö–æ–º–∞–Ω–¥–∞ /force_update."""
    msg = await message.answer(
        text="‚öô –ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø...\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –≠—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (–æ–±—ã—á–Ω–æ 1-2 –º–∏–Ω—É—Ç—ã)."
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø —Å –ø–æ–º–æ—â—å—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    async for updated_text in update_groups():
        await msg.edit_text(updated_text)

    prompt_text = (
        "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø? (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)"
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úî –î–∞", callback_data="force-update-yes"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="force-update-no"),
            ]
        ]
    )

    await message.answer(text=prompt_text, reply_markup=keyboard)


@admin_router.message(Command("update_teachers"))
async def cmd_update_teachers(message: Message):
    """### [`Command`] –ö–æ–º–∞–Ω–¥–∞ /update_teachers."""
    teacher_list = api.teacher_list()
    processed_count = 0
    succeeded_count = 0

    text = (
        f"‚öô <b>–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:</b> {len(teacher_list)}\n\n"
        f"‚ôªÔ∏è <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {processed_count}/{len(teacher_list)}\n"
        f"‚úÖ <b>–ë–µ–∑ –æ—à–∏–±–æ–∫:</b> {succeeded_count}\n"
        f"‚ùå <b>–° –æ—à–∏–±–∫–æ–π:</b> {processed_count - succeeded_count}"
    )

    sent_message = await message.answer(text, reply_markup=kb_update_teachers)

    for teacher_name in teacher_list:
        teacher = api.teacher(teacher_name)

        if teacher:
            db.add_teacher(teacher, replace=True)
            succeeded_count += 1

        processed_count += 1

        text = (
            f"‚öô <b>–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:</b> {len(teacher_list)}\n\n"
            f"‚ôªÔ∏è <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {processed_count}/{len(teacher_list)}\n"
            f"‚úÖ <b>–ë–µ–∑ –æ—à–∏–±–æ–∫:</b> {succeeded_count}\n"
            f"‚ùå <b>–° –æ—à–∏–±–∫–æ–π:</b> {processed_count - succeeded_count}"
        )

        await sent_message.edit_text(text)
