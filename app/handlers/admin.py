"""app/handlers/admin.py

    –•—ç–Ω–¥–ª–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–æ–≤.
"""
from asyncio import sleep

from aiogram import Dispatcher, types
from loguru import logger

from app.keyboards import kb_admin, kb_update_teachers
from app.utils.db_worker import DBWorker
from app.utils.api_worker import APIWorker
from app.properties import MONGODB_URI

db = DBWorker(MONGODB_URI)
api = APIWorker()


async def cmd_broadcast(message: types.Message):
    """### [`Command`] –ö–æ–º–∞–Ω–¥–∞ /broadcast.
    """
    settings = db.settings()
    if message.chat.id in settings.admins:
        if message.text == '/broadcast':
            return await message.answer(
                "üì® /broadcast: –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>/broadcast &lt;group|all&gt; &lt;message&gt;</code>"
            )

        group, text = message.text.split(' ', maxsplit=2)[1:3]

        i = 1
        if group == 'all':
            text = 'üîî <b>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø!</b>\n' + text
            for user in db._users.find():
                if i % 25 == 0:
                    sleep(1)
                user_id = user['user_id']
                try:
                    await message.bot.send_message(user_id, text)
                    i += 1
                except Exception as exc:
                    logger.error(
                        f"Exception caught while broadcasting to all: {exc}"
                    )
        elif group == 'test':
            text = 'üîî <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n' + text
            await message.answer(text)
        else:
            text = f'üîî <b>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}!</b>\n' + text
            # TODO: –í—ã–Ω–µ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            for user in db._users.find({'group': group}):
                if i == 25:
                    sleep(1)
                user_id = user['user_id']
                try:
                    await message.bot.send_message(user_id, text)
                    i += 1
                except Exception as exc:
                    logger.error(
                        f"Exception caught while broadcasting to group {group}: {exc}"
                    )


async def cmd_admin(message: types.Message):
    """### [`Command`] –ö–æ–º–∞–Ω–¥–∞ /admin.
    """
    settings = db._settings.find_one({})
    user = db.user(message.from_user.id)
    if message.chat.id in settings['admins']:
        count = db._users.count_documents({})
        maintenance_state = 'üü¢ –í–∫–ª—é—á–µ–Ω—ã' if settings['maintenance'] else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω—ã'
        await message.answer(
            text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {user.full_name}.\n'
            f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <u>{count}</u></b>\n'
            f'<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Ö.—Ä–∞–±–æ—Ç: <u>{maintenance_state}</u></b>\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:',
            reply_markup=kb_admin
        )


async def cmd_update_groups(message: types.Message):
    """### [`Command`] –ö–æ–º–∞–Ω–¥–∞ /update_groups.
    """
    settings = db.settings()
    if message.chat.id in settings.admins:
        if message.text == "/update_groups":
            return await message.answer(
                "üÜô /update_groups: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.\n"
                "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>/update_groups &lt;groups&gt;</code>"
            )

        groups = message.get_args().lstrip()
        text = '‚öô –ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø...\n\n'
        main_message = await message.answer(text)
        for group in groups.splitlines():
            schedule = api.schedule(group)
            db.add_schedule(schedule, replace=True)
            text += f'‚úî {group}\n'
            await main_message.edit_text(text)

        await main_message.edit_text(text + '\n‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')


async def cmd_force_update(message: types.Message):
    """### [`Command`] –ö–æ–º–∞–Ω–¥–∞ /force_update.
    """
    settings = db.settings()
    if message.chat.id in settings.admins:
        groups_text = ''
        await message.answer(
            text='‚öô –ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø...\n\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –≠—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (–æ–±—ã—á–Ω–æ 1-2 –º–∏–Ω—É—Ç—ã).'
        )

        for year in db.years():
            for faculty in db.faculties():
                groups_text += f'{faculty["full"]} ({year} –≥–æ–¥): \n'
                # TODO: –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 4-—Ö –∑–Ω–∞—á–Ω—ã–º–∏ –≥–æ–¥–∞–º–∏
                groups = api.groups(faculty["full"], str(year)[2:4])
                db.add_groups(faculty["full"], str(year), groups, replace=True)

                for group in groups:
                    groups_text += f'{group}\n'

                groups_text += '\n'
            await message.answer(text=groups_text)
            groups_text = ''
            # REVIEW - –Ω–∞–¥–æ –∏–ª–∏ –Ω–µ—Ç?
            year -= 1

        prompt_text = '–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø? (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)'
        keyboard = types.InlineKeyboardMarkup()
        # TODO: –£–±—Ä–∞—Ç—å v2
        keyboard.row(
            types.InlineKeyboardButton(
                text='‚úî –î–∞', callback_data='force-update-yes'),
            types.InlineKeyboardButton(
                text='‚úî –î–∞ (v2)', callback_data='force-update-yes-v2'),
            types.InlineKeyboardButton(
                text='‚ùå –ù–µ—Ç', callback_data='force-update-no')
        )

        await message.answer(text=prompt_text, reply_markup=keyboard)


async def cmd_update_teachers(message: types.Message):
    """### [`Command`] –ö–æ–º–∞–Ω–¥–∞ /update_teachers.
    """
    settings = db.settings()
    if message.chat.id in settings.admins:
        teacher_list = api.teacher_list()
        processed_count = 0
        succeeded_count = 0

        text = (
            f'‚öô <b>–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:</b> {len(teacher_list)}\n\n'
            f'‚ôªÔ∏è <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {processed_count}/{len(teacher_list)}\n'
            f'‚úÖ <b>–ë–µ–∑ –æ—à–∏–±–æ–∫:</b> {succeeded_count}\n'
            f'‚ùå <b>–° –æ—à–∏–±–∫–æ–π:</b> {processed_count - succeeded_count}'
        )

        message = await message.answer(
            text,
            reply_markup=kb_update_teachers
        )

        for teacher_name in teacher_list:
            teacher = api.teacher(teacher_name)

            if teacher:
                db.add_teacher(teacher, replace=True)
                succeeded_count += 1

            processed_count += 1

            text = (
                f'‚öô <b>–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:</b> {len(teacher_list)}\n\n'
                f'‚ôªÔ∏è <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {processed_count}/{len(teacher_list)}\n'
                f'‚úÖ <b>–ë–µ–∑ –æ—à–∏–±–æ–∫:</b> {succeeded_count}\n'
                f'‚ùå <b>–° –æ—à–∏–±–∫–æ–π:</b> {processed_count - succeeded_count}'
            )

            await message.edit_text(text)


def register_handlers_admin(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–æ–≤.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        dp (aiogram.types.Dispatcher): –¥–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
    """
    # pylint: disable=invalid-name
    # dp - —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    dp.register_message_handler(cmd_broadcast, commands="broadcast")
    dp.register_message_handler(cmd_admin, commands="admin")
    dp.register_message_handler(cmd_update_groups, commands="update_groups")
    dp.register_message_handler(cmd_force_update, commands="force_update")
    dp.register_message_handler(
        cmd_update_teachers, commands="update_teachers")
