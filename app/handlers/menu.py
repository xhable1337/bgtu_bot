"""app/handlers/common.py

–•—ç–Ω–¥–ª–µ—Ä—ã –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é.
"""

import datetime
from html import escape

from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Filter, Text
from loguru import logger

from app.keyboards import days_keyboard, kb_cancel, kb_notifications_days, kbbb, kbm
from app.properties import MONGODB_URI, week_is_odd
from app.utils import wdays
from app.utils.db_worker import DBWorker

# TODO: –ò–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç wd_name –∏ wd_numbers, –ø–µ—Ä–µ–º–µ—Å—Ç–∏–≤ –≤ –¥—Ä—É–≥—É—é —Ç–æ—á–∫—É
from app.utils.text_generator import rings_table, schedule_text, wd_name, wd_numbers

db = DBWorker(MONGODB_URI)


class _Maintenance(Filter):
    # pylint: disable=arguments-differ
    # Hey, pylint, 2 == 2, isn't it? c:
    key = "is_maintenance"

    async def check(self, message: types.Message):
        settings = db.settings()

        return settings.maintenance and not message.from_user.id in settings.admins


async def cb_days(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∞ ¬´–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º¬ª."""
    if week_is_odd():
        weektype = "[–ù] - –Ω–µ—á—ë—Ç–Ω–∞—è"
        buttons = ["[–ù]", "–ß"]
    else:
        weektype = "[–ß] - —á—ë—Ç–Ω–∞—è"
        buttons = ["–ù", "[–ß]"]

    kb_dn = days_keyboard(buttons)

    await call.message.edit_text(
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –∏ –¥–µ–Ω—å (—Å–µ–π—á–∞—Å –∏–¥—ë—Ç {weektype}):\n", reply_markup=kb_dn
    )

    await call.answer()


async def cb_rings(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∞ ¬´–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä¬ª."""
    await call.message.edit_text(text=rings_table(), reply_markup=kbbb)
    await call.answer()


async def cb_today(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∞ ¬´–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è¬ª."""
    user = db.user(call.from_user.id)

    isoweekday = datetime.datetime.today().isoweekday()

    if week_is_odd():
        weektype = "odd"
    else:
        weektype = "even"

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –∏–∑ –ë–î
    if isoweekday != 7:
        schedule = db.schedule(user.group, wd_name[isoweekday][1], weektype)
    else:
        schedule = None

    # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = schedule_text("today", isoweekday, user.group, weektype, schedule)

    await call.message.edit_text(text, reply_markup=kbbb)
    await call.answer()


async def cb_tomorrow(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∞ ¬´–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞¬ª."""
    user = db.user(call.from_user.id)

    isoweekday = datetime.datetime.today().isoweekday() + 1

    _week_is_odd = week_is_odd()

    # –ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –Ω–µ–¥–µ–ª—è –¥–æ–ª–∂–Ω–∞ –º–µ–Ω—è—Ç—å—Å—è
    if isoweekday == 8:
        # —Ç.–µ. –º–µ–Ω—è–µ–º —É—Å–ª–æ–≤–∏–µ —á—ë—Ç–Ω–æ—Å—Ç–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–µ
        _week_is_odd = not _week_is_odd

    if _week_is_odd:
        weektype = "odd"
    else:
        weektype = "even"

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –∏–∑ –ë–î
    if isoweekday != 7:
        schedule = db.schedule(user.group, wd_name[isoweekday][1], weektype)
    else:
        schedule = None

    # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = schedule_text("tomorrow", isoweekday, user.group, weektype, schedule)

    await call.message.edit_text(text, reply_markup=kbbb)
    await call.answer()


async def cb_wday(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    user = db.user(call.from_user.id)

    # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    weekday = call.data.split("_")[1]

    # –¢–∏–ø –Ω–µ–¥–µ–ª–∏ (odd - –Ω–µ—á–µ—Ç, even - —á—ë—Ç)
    weektype = call.data.split("_")[2]

    # –ù–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    isoweekday = wd_numbers[weekday]

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –∏–∑ –ë–î
    schedule = db.schedule(user.group, wd_name[isoweekday][1], weektype)

    # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = schedule_text("other", isoweekday, user.group, weektype, schedule)

    await call.message.edit_text(text, reply_markup=kbbb)
    await call.answer()


async def cb_tomain(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user = db.user(call.from_user.id)
    user.state = "default"
    weekname = "–Ω–µ—á—ë—Ç–Ω–∞—è" if week_is_odd() else "—á—ë—Ç–Ω–∞—è"
    await call.message.edit_text(
        text=f"–ü—Ä–∏–≤–µ—Ç, {escape(user.full_name)}!\n"
        f"<b>–¢–≤–æ—è –≥—Ä—É–ø–ø–∞: {user.group}.</b>\n"
        f"<b>–°–µ–π—á–∞—Å –∏–¥—ë—Ç {weekname} –Ω–µ–¥–µ–ª—è.</b>\n"
        "–í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=kbm,
    )
    await call.answer()


async def cb_building(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏."""
    user = db.user(call.from_user.id)
    user.state = "find_class"
    await call.message.edit_text(
        text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏:", reply_markup=kb_cancel
    )
    await call.answer()


async def cb_cancel(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏."""
    user = db.user(call.from_user.id)
    user.state = "default"
    weekname = "–Ω–µ—á—ë—Ç–Ω–∞—è" if week_is_odd() else "—á—ë—Ç–Ω–∞—è"
    await call.message.edit_text(
        text=f"–ü—Ä–∏–≤–µ—Ç, {escape(user.full_name)}!\n"
        f"<b>–¢–≤–æ—è –≥—Ä—É–ø–ø–∞: {user.group}.</b>\n"
        f"<b>–°–µ–π—á–∞—Å –∏–¥—ë—Ç {weekname} –Ω–µ–¥–µ–ª—è.</b>\n"
        "–í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=kbm,
    )
    await call.answer()


async def cb_change_faculty(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞."""
    # –í—ã–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    kb_faculty = types.InlineKeyboardMarkup()

    for faculty in db.faculties():
        kb_faculty.row(
            types.InlineKeyboardButton(
                text=faculty["full"], callback_data=f"f_{faculty['short']}"
            )
        )

    kb_faculty.row(types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="tomain"))

    await call.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:",  # –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:
        reply_markup=kb_faculty,
    )

    await call.answer()


async def cb_f(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ -> –≤—ã–±–æ—Ä –≥–æ–¥–∞."""
    # –í—ã–±–æ—Ä –≥–æ–¥–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
    faculty = str(call.data[2:])

    kb_years = types.InlineKeyboardMarkup()

    for year in db.years():
        callback_year = f"y_{year}_{faculty}"
        kb_years.row(
            types.InlineKeyboardButton(text=str(year), callback_data=callback_year)
        )

    kb_years.row(types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="tomain"))

    await call.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:",
        reply_markup=kb_years,
    )

    await call.answer()


async def cb_y(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ -> –≤—ã–±–æ—Ä –≥–æ–¥–∞ -> –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã."""
    year = call.data.split("_")[1]
    faculty = call.data.split("_")[2]

    kb_group = types.InlineKeyboardMarkup()
    for _faculty in db.faculties():
        if _faculty["short"] == faculty:
            faculty = _faculty["full"]

    for group in db.groups(faculty, year):
        kb_group.row(types.InlineKeyboardButton(text=group, callback_data=f"g_{group}"))

    kb_group.row(types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="tomain"))

    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=kb_group)

    await call.answer()


async def cb_g(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞/—É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã."""
    user = db.user(call.from_user.id)
    group = str(call.data).split("g_")[1]
    if str(call.data).endswith("__del"):
        #! –ì—Ä—É–ø–ø–∞ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
        group = group.split("__")[0]
        user = db.user(call.from_user.id)
        favorite_groups = user.favorite_groups
        favorite_groups.pop(favorite_groups.index(group))
        user.favorite_groups = favorite_groups

        await cb_tomain(call)

        await call.answer(f"‚ùå –ì—Ä—É–ø–ø–∞ {group} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö!", show_alert=True)
    else:
        if user.state == "default":
            user.group = group
            await cb_tomain(call)

        elif user.state == "add_favorite":
            #! –ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
            favorite_groups = user.favorite_groups
            favorite_groups.append(call.data.split("g_")[1])
            user.favorite_groups = favorite_groups
            await cb_tomain(call)


async def cb_add_favorite(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ."""
    user = db.user(call.from_user.id)
    user.state = "add_favorite"
    kb_faculty = types.InlineKeyboardMarkup()

    for faculty in db.faculties():
        kb_faculty.row(
            types.InlineKeyboardButton(
                text=faculty["full"], callback_data=f"f_{faculty['short']}"
            )
        )

    kb_faculty.row(types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="tomain"))

    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=kb_faculty)

    await call.answer()


async def cb_notifications(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏."""
    user = db.user(call.from_user.id)
    notification_time = user.notification_time

    notification_is_empty = notification_time is None or notification_time == {}

    if notification_is_empty:
        await call.message.edit_text(
            text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
            reply_markup=kb_notifications_days,
        )
    else:
        text = "–î–Ω–∏ –Ω–µ–¥–µ–ª–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º: \n\n"
        for day in notification_time:
            if notification_time[day] != "":
                day_ru = wdays.translate(day)
                text += f"{day_ru.capitalize()}: {notification_time[day]}\n"

        text += (
            "\n–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è, –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:"
        )

        await call.message.edit_text(text=text, reply_markup=kb_notifications_days)

    await call.answer()


async def cb_notify(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å."""
    user = db.user(call.from_user.id)
    weekday = str(call.data).split("_")[1]

    notification_is_empty = (
        user.notification_time is None
        or user.notification_time == {}
        or user.notification_time.get(weekday) is None
        or user.notification_time.get(weekday) == ""
    )

    if notification_is_empty:
        user.state = f"add_notification_{weekday}"
        text = (
            f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({wdays.translate(weekday)})\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
            "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
            "–ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 00:00 –¥–æ 12:59, "
            "—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
            "–ï—Å–ª–∏ –∂–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 13:00 –¥–æ 23:59, "
            "—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞."
        )
        reply_markup = kb_cancel
    else:
        text = f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({wdays.translate(weekday)}):"
        kb_notifications = types.InlineKeyboardMarkup(row_width=1)
        kb_notifications.add(
            types.InlineKeyboardButton(
                text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_notification_{weekday}"
            ),
            types.InlineKeyboardButton(
                text="‚úç –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_notification_{weekday}"
            ),
            types.InlineKeyboardButton(
                text="üîÑ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="tomain"
            ),
        )
        reply_markup = kb_notifications

    await call.message.edit_text(
        text=text,
        reply_markup=reply_markup,
    )

    await call.answer()


async def cb_del_notification(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å."""
    user = db.user(call.from_user.id)
    weekday = str(call.data).split("_")[2]

    user_time = user.notification_time.get(weekday)

    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    # {
    #     'monday': {
    #         '07:00': [id1, id2, ...],
    #         '08:00': [id3, id4, ...]
    #     },
    #     'tuesday': {...},
    #     ...
    # }

    sample_notification_time = {
        "monday": "",
        "tuesday": "",
        "wednesday": "",
        "thursday": "",
        "friday": "",
        "saturday": "",
        "sunday": "",
    }

    # * –£–¥–∞–ª—è–µ–º –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —é–∑–µ—Ä–∞ –∏ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    schedule_list: dict = db._scheduled_msg.find_one({"id": 1})
    if len(schedule_list[weekday][user_time]) == 1:
        schedule_list[weekday].pop(user_time)
    else:
        user_index = schedule_list[weekday][user_time].index(user.user_id)
        schedule_list[weekday][user_time].pop(user_index)

    # TODO: —Å–¥–µ–ª–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤–º–µ—Å—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø–æ–ª—é —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π
    db._scheduled_msg.update_one({"id": 1}, {"$set": schedule_list})

    # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –æ–±–Ω—É–ª–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—è (—Å–µ–π–≤–∏–º –º–µ—Å—Ç–æ –≤ –ë–î)
    notification_time = user.notification_time
    notification_time[weekday] = ""

    # REVIEW - —á–∞—Å—Ç–∏—á–Ω—ã–π —Ñ–∏–∫—Å, –∑–∞–º–µ–Ω–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
    if notification_time == sample_notification_time:
        notification_time = {}

    user.notification_time = notification_time

    await call.message.edit_text(
        text=f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ({wdays.translate(weekday)}) –≤—ã–∫–ª—é—á–µ–Ω–æ.",
        reply_markup=kbbb,
    )

    await call.answer()


async def cb_edit_notification(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å."""
    user = db.user(call.from_user.id)
    weekday = str(call.data).split("_")[2]
    notification_time = user.notification_time[weekday]

    text = (
        f"–°–µ–π—á–∞—Å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ({wdays.translate(weekday)}) –≤ {notification_time}.\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
        "–ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 00:00 –¥–æ 12:59, "
        "—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
        "–ï—Å–ª–∏ –∂–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 13:00 –¥–æ 23:59, "
        "—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞."
    )

    user.state = f"add_notification_{weekday}"

    await call.message.edit_text(text=text, reply_markup=kb_cancel)

    await call.answer()


async def dummycb_maintenance(call: types.CallbackQuery):
    """### [`DummyCallback`] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –≤—Ä–µ–º—è —Ç–µ—Ö—Ä–∞–±–æ—Ç."""
    await call.answer(
        text="‚ö° –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö.—Ä–∞–±–æ—Ç–∞—Ö. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ.", show_alert=True
    )


async def cb_favorite_groups(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∞ "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã"."""
    kb_favorite = types.InlineKeyboardMarkup()

    user = db.user(call.from_user.id)
    fav_count = 0

    if user.favorite_groups is not None:
        #! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ö–æ–¥–∏–ª –≤ —Ä–∞–∑–¥–µ–ª –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
        for group in user.favorite_groups:
            kb_favorite.row(
                types.InlineKeyboardButton(text=group, callback_data=f"g_{group}"),
                types.InlineKeyboardButton(text="‚ùå", callback_data=f"g_{group}__del"),
            )
            fav_count += 1

        # –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ—Ç—ã –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
        space_left = 5 - fav_count

        for _ in range(space_left):
            kb_favorite.row(
                types.InlineKeyboardButton(
                    text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_favorite"
                )
            )
    else:
        #! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∑–∞—à—ë–ª –≤ —Ä–∞–∑–¥–µ–ª –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
        user.favorite_groups = []

        for _ in range(5):
            kb_favorite.row(
                types.InlineKeyboardButton(
                    text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_favorite"
                )
            )

    kb_favorite.row(
        types.InlineKeyboardButton(text="üîÑ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="tomain")
    )

    await call.message.edit_text(
        text="–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø:", reply_markup=kb_favorite
    )

    await call.answer()


def register_handlers_menu(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö—ç–Ω–¥–ª–µ—Ä—ã –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        dp (aiogram.types.Dispatcher): –¥–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
    """
    # pylint: disable=invalid-name
    # dp - —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞

    dp.bind_filter(_Maintenance)
    dp.register_callback_query_handler(dummycb_maintenance, _Maintenance())
    dp.register_callback_query_handler(cb_days, Text("days"))
    dp.register_callback_query_handler(cb_today, Text("today"))
    dp.register_callback_query_handler(cb_tomorrow, Text("tomorrow"))
    dp.register_callback_query_handler(cb_wday, Text(startswith="wday_"))
    dp.register_callback_query_handler(cb_rings, Text("rings"))
    dp.register_callback_query_handler(cb_tomain, Text("tomain"))
    dp.register_callback_query_handler(cb_building, Text("building"))
    dp.register_callback_query_handler(cb_cancel, Text("cancel"))
    dp.register_callback_query_handler(cb_change_faculty, Text("change_faculty"))
    dp.register_callback_query_handler(cb_f, Text(startswith="f_"))
    dp.register_callback_query_handler(cb_g, Text(startswith="g_"))
    dp.register_callback_query_handler(cb_y, Text(startswith="y_"))
    dp.register_callback_query_handler(cb_add_favorite, Text("add_favorite"))
    dp.register_callback_query_handler(cb_notifications, Text("notifications"))
    dp.register_callback_query_handler(cb_notify, Text(startswith="notify_"))
    dp.register_callback_query_handler(
        cb_del_notification, Text(startswith="del_notification_")
    )
    dp.register_callback_query_handler(
        cb_edit_notification, Text(startswith="edit_notification_")
    )
    dp.register_callback_query_handler(
        cb_favorite_groups, Text(startswith="favorite_groups")
    )
