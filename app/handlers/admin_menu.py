from contextlib import suppress

from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Text
import datetime
# from aiogram.dispatcher.storage import FSMContext
from aiogram.utils.exceptions import MessageCantBeDeleted, MessageNotModified

# TODO: –ò–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç wildcard import
from app.keyboards import *
from app.utils.db_worker import DBWorker
from app.utils.api_worker import APIWorker
from app.properties import MONGODB_URI

db = DBWorker(MONGODB_URI)
api = APIWorker()

async def cb_force_update(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∏ –¥–∞/–Ω–µ—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    """
    await call.answer()
    
    choice = str(call.data).split('-')[2]
    text = ''
    if choice == 'no':
        await call.message.edit_text('–•–æ—Ä–æ—à–æ, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')
    else:
        text = '‚öô –ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...\n\n'
        msg = await call.bot.send_message(call.message.chat.id, text=text, parse_mode='HTML')
        msgid = msg.message_id

        for year in db.years():
            for faculty in db.faculties():
                text += f'{faculty["full"]} ({year} –≥–æ–¥): \n'
                groups = db.groups(
                    faculty=faculty["full"], 
                    year=str(year)
                )
                for group in groups:
                    schedule = api.schedule(group)
                    db.add_schedule(schedule)
                    text += f'‚úî {group}\n'
                    
                text += '\n'
            
                await call.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=msgid,
                    text=text,
                    parse_mode='HTML'
                )

            text = '‚öô –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...\n\n'
            msg = await call.bot.send_message(call.message.chat.id, text=text, parse_mode='HTML')
            msgid = msg.message_id
            # year -= 1

        await msg.edit_text('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')


async def cb_user_list(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    count = db._users.count_documents({})
    text = f'<u>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ (–≤—Å–µ–≥–æ {count}):</u>\n\n'
    block_count = 0
    await call.answer("–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –±–∞–∑—ã...")
    last_msg: types.Message
    
    for user in db._users.find():
        first_name = user['first_name']
        last_name = user['last_name']
        user_id = user['user_id']
        group = user['group']
        if last_name != None or last_name != "None":
            add = f'<a href="tg://user?id={user_id}">{first_name} {last_name}</a> ‚óº <b>–ì—Ä—É–ø–ø–∞ {group}</b>\n'
            if len(text + add) <= 4096:
                text += add
            else:
                if block_count == 0:
                    await call.message.edit_text(text=text)
                else:
                    last_msg = await call.bot.send_message(call.message.chat.id, text, parse_mode='HTML')
                    text = f'<a href="tg://user?id={user_id}">{first_name} {last_name}</a> ‚óº <b>–ì—Ä—É–ø–ø–∞ {group}</b>\n'
        else:
            if len(text + f'<a href="tg://user?id={user_id}">{first_name}</a> ‚óº <b>–ì—Ä—É–ø–ø–∞ {group}</b>\n') <= 4096:
                text += f'<a href="tg://user?id={user_id}">{first_name}</a> ‚óº <b>–ì—Ä—É–ø–ø–∞ {group}</b>\n'
            else:
                if block_count == 0:
                    await call.message.edit_text(text=text)
                else:
                    last_msg = await call.bot.send_message(
                        chat_id=call.message.chat.id, 
                        text=text
                    )
                    text = f'<a href="tg://user?id={user_id}">{first_name}</a> ‚óº <b>–ì—Ä—É–ø–ø–∞ {group}</b>\n'

        block_count += 1
    

    if block_count == 0:
        await call.message.edit_reply_markup(
            reply_markup=kb_admin_back
        )
    else:
        await call.bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=last_msg.message_id,
            reply_markup=kb_admin_back
        )


async def cb_toadmin(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é.
    """
    # TODO: –≤—ã–Ω–µ—Å—Ç–∏ settings –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ DBWorker
    count = db._users.count_documents({})
    maintenance_state = 'üü¢ –í–∫–ª—é—á–µ–Ω—ã' if db._settings.find_one({})['maintenance'] else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω—ã'
    await call.message.edit_text(
        text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {call.from_user.first_name}.\n'
        f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <u>{count}</u></b>\n'
        f'<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Ö.—Ä–∞–±–æ—Ç: <u>{maintenance_state}</u></b>\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:',
        reply_markup=kb_admin
    )


async def cb_toggle_maintenance(call: types.CallbackQuery):
    """### [`Callback`] –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ç–µ—Ö—Ä–∞–±–æ—Ç.
    """
    # TODO: –≤—ã–Ω–µ—Å—Ç–∏ settings –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ DBWorker
    new_state = False if db._settings.find_one({})['maintenance'] else True
    db._settings.update_one({}, {'$set': {'maintenance': new_state}})
    await cb_toadmin(call)


def register_handlers_admin_menu(dp: Dispatcher):
    dp.register_callback_query_handler(cb_force_update, Text(startswith='force-update-'))
    dp.register_callback_query_handler(cb_user_list, Text('user_list'))
    dp.register_callback_query_handler(cb_toadmin, Text('toadmin'))
    dp.register_callback_query_handler(cb_toggle_maintenance, Text('toggle_maintenance'))
    