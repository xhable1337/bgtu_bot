"""app/handlers/common.py

    –•—ç–Ω–¥–ª–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

import re

from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Text
from loguru import logger

from app.keyboards import kbm, kb_cancel, kbbb
from app.models import User
from app.properties import week_is_odd, MONGODB_URI
from app.utils.db_worker import DBWorker

db = DBWorker(MONGODB_URI)


async def cmd_start(message: types.Message):
    """### [`Command`] –ö–æ–º–∞–Ω–¥–∞ /start.
    """
    await message.bot.send_chat_action(message.from_user.id, 'typing')
    user = db.user(message.from_user.id)

    if not user:
        # TODO: –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≥—Ä—É–ø–ø—É undefined –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –≤ –±–æ—Ç–∞
        user = User(
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            user_id=message.from_user.id,
            username=message.from_user.username,
            state='default',
            group='–û-20-–ò–í–¢-1-–ø–æ-–ë',
            favorite_groups=[]
        )
        db.add_user(user, replace=False)

        kb_faculty = types.InlineKeyboardMarkup()
        for faculty in db.faculties():
            kb_faculty.row(
                types.InlineKeyboardButton(
                    text=faculty["full"],
                    callback_data=f'f_{faculty["short"]}'
                )
            )

        user = db.user(message.from_user.id)

        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç, {user.full_name}!\n'
            '<b>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É '
            '(–≤–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –≤—ã–±–æ—Ä –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å):</b>',
            reply_markup=kb_faculty
        )

        logger.info(f"New user! ID: {user.user_id}")
    else:
        db.add_user(user.obj(), replace=True)
        user.state = 'default'

        btn = types.MenuButtonWebApp(
            '–ë–æ—Ç v2',
            types.WebAppInfo(
                url='https://tgweb.zgursky.tk'
            )
        )
        await message.bot.set_chat_menu_button(message.chat.id, btn)

        weekname = '–Ω–µ—á—ë—Ç–Ω–∞—è' if week_is_odd() else '—á—ë—Ç–Ω–∞—è'
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç, {user.full_name}!\n'
            f'<b>–¢–≤–æ—è –≥—Ä—É–ø–ø–∞: {user.group}.</b>\n'
            f'<b>–°–µ–π—á–∞—Å –∏–¥—ë—Ç {weekname} –Ω–µ–¥–µ–ª—è.</b>\n'
            '–í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
            reply_markup=kbm
        )


async def msg_any(message: types.Message):
    """ ### [`Message`] –õ—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –ø–æ–ø–∞–¥–∞—é—â–∏–µ –ø–æ–¥ –¥—Ä—É–≥–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã.
    """
    user = db.user(message.from_user.id)
    settings = db.settings()

    if settings.maintenance and user.user_id not in settings.admins:
        return await message.reply('‚ö° –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö.—Ä–∞–±–æ—Ç–∞—Ö. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ.')

    #! –Æ–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø—É—Å—Ç—å –ø—Ä–æ–∂–º—ë—Ç /start
    if not user:
        return await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.')

    # ? –û–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —é–∑–µ—Ä —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é
    if user.state == 'default':
        await cmd_start(message)

    # ? –ü–æ–∏—Å–∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    elif user.state == 'find_class':
        building_1 = 'https://telegra.ph/file/49ec8634ab340fa384787.png'
        regex_1 = re.compile(r'(\b[1-9][1-9]\b|\b[1-9]\b)')

        building_2 = 'https://telegra.ph/file/7d04458ac4230fd12f064.png'
        regex_2 = re.compile(r'\b[1-9][0-9][0-9]\b')

        building_3 = 'https://telegra.ph/file/6b801965b5771830b67f0.png'
        regex_3 = re.compile(
            r'(\b–ê\d{3}\b|\b[–ê–∞]\b|\b[–ë–±]\b|\b[–í–≤]\b|\b[–ì–≥]\b|\b[–î–¥]\b)')

        building_4 = 'https://telegra.ph/file/f79c20324a0ba6cd88711.png'
        regex_4 = re.compile(r'\b–ë\d{3}\b')

        if re.match(regex_1, message.text):
            #! –ù–∞–π–¥–µ–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è –≤ –∫–æ—Ä–ø—É—Å–µ ‚Ññ2
            await message.answer_photo(
                photo=building_1,
                caption=f'–ê—É–¥–∏—Ç–æ—Ä–∏—è {message.text} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–ø—É—Å–µ '
                '‚Ññ1 <i>(–ò–Ω—Å—Ç–∏—Ç—É—Ç—Å–∫–∞—è, 16)</i>.',
            )

            await message.answer_location(
                latitude=53.305077,
                longitude=34.305080
            )

            await cmd_start(message)
        elif re.match(regex_2, message.text):
            #! –ù–∞–π–¥–µ–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è –≤ –∫–æ—Ä–ø—É—Å–µ ‚Ññ2
            await message.answer_photo(
                photo=building_2,
                caption=f'–ê—É–¥–∏—Ç–æ—Ä–∏—è {message.text} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–ø—É—Å–µ '
                '‚Ññ2 <i>(–±—É–ª—å–≤–∞—Ä 50 –ª–µ—Ç –û–∫—Ç—è–±—Ä—è, 7)</i>.',
            )

            await message.answer_location(
                latitude=53.304442,
                longitude=34.303849
            )

            await cmd_start(message)
        elif re.match(regex_3, message.text):
            await message.answer_photo(
                photo=building_3,
                caption=f'–ê—É–¥–∏—Ç–æ—Ä–∏—è {message.text} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–ø—É—Å–µ '
                '‚Ññ3 <i>(–•–∞—Ä—å–∫–æ–≤—Å–∫–∞—è, 8)</i>.',
            )

            await message.answer_location(
                latitude=53.304991,
                longitude=34.306688
            )

            await cmd_start(message)
        elif re.match(regex_4, message.text):
            await message.answer_photo(
                photo=building_4,
                caption=f'–ê—É–¥–∏—Ç–æ—Ä–∏—è {message.text} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–ø—É—Å–µ '
                '‚Ññ4 <i>(–•–∞—Ä—å–∫–æ–≤—Å–∫–∞—è, 10–ë)</i>.',
            )

            await message.answer_location(
                latitude=53.303513,
                longitude=34.305085
            )

            await cmd_start(message)
        else:
            await message.answer(
                '–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                reply_markup=kb_cancel,
            )

    # ? –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    elif user.state.startswith('add_notification_'):
        time_regex = re.compile(
            r'^2[0-3]:[0-5][0-9]$|^[0]{1,2}:[0-5][0-9]$|^1[0-9]:[0-5][0-9]$|^0?[1-9]:[0-5][0-9]$')

        if not re.match(time_regex, message.text):
            return await message.answer(
                '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                reply_markup=kb_cancel
            )

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú
        if re.match(r'\b[0-9]:[0-5][0-9]\b', message.text):
            notification_time = f"0{message.text}"
        else:
            notification_time = message.text

        weekday = user.state.split('_')[2]

        # TODO: –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ–º–∏ –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏ (—Å–µ–π–≤–∏–º –º–µ—Å—Ç–æ –≤ –ë–î)
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
        user_time_dict = user.notification_time
        if user_time_dict is None or user_time_dict == {}:
            user_time_dict = {
                "monday": "",
                "tuesday": "",
                "wednesday": "",
                "thursday": "",
                "friday": "",
                "saturday": "",
                "sunday": ""
            }

        scheduled_msg = db._scheduled_msg.find_one({'id': 1})

        #! –ï—Å–ª–∏ —É–∂–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ
        if user_time_dict[weekday] != "":
            user_time = user_time_dict[weekday]
            user_index = scheduled_msg[weekday][user_time].index(user.user_id)
            scheduled_msg[weekday][user_time].pop(user_index)

        user_time_dict[weekday] = notification_time

        #! –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
        if scheduled_msg[weekday].get(notification_time) is None:
            scheduled_msg[weekday][notification_time] = [user.user_id]
        else:
            scheduled_msg[weekday][notification_time].append(user.user_id)

        #! –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–ø–¥–µ–π—Ç–æ–≤ –∫ –±–∞–∑–µ
        user.notification_time = user_time_dict
        db._scheduled_msg.update_one({'id': 1}, {'$set': scheduled_msg})

        await message.answer(
            f'‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ {message.text} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!',
            reply_markup=kbbb
        )

        user.state = 'default'


async def cmd_cancel(message: types.Message):
    """### [`Command`] –ö–æ–º–∞–Ω–¥–∞ /cancel.
    """
    user = db.user(message.from_user.id)
    user.state = 'default'
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start.",
        reply_markup=types.ReplyKeyboardRemove()
    )


async def cmd_support(message: types.Message):
    """### [`Command`] –ö–æ–º–∞–Ω–¥–∞ /support.
    """
    await message.answer(
        "üíÅ‚Äç‚ôÇÔ∏è –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º, –ø–æ–∂–µ–ª–∞–Ω–∏—è–º –∏ –ø—Ä–æ–±–ª–µ–º–∞–º "
        "–æ–±—Ä–∞—â–∞—Ç—å—Å—è —Å—é–¥–∞: <b>@BGTU_Feedback_bot</b>."
    )


async def cmd_dev(message: types.Message):
    """### [`Command`] –ö–æ–º–∞–Ω–¥–∞ /dev.
    """
    await message.answer(
        'üë®‚Äçüíª <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞:</b> @xhable.\n'
        'üíª <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>:\n'
        '‚îî ü§ñ <b>–ë–æ—Ç:</b> '
        '<a href="https://www.python.org">Python 3</a> + '
        '<a href="https://github.com/aiogram/aiogram">aiogram</a>\n'
        '‚îî üåê <b>–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b> '
        '<a href="https://nodejs.org/en/">Node.js</a> + '
        '<a href="https://reactjs.org">React</a>\n'
        'üî° <b>–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:</b> '
        'coming soon...',
        disable_web_page_preview=True
    )


def register_handlers_common(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö—ç–Ω–¥–ª–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        dp (aiogram.types.Dispatcher): –¥–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
    """
    # pylint: disable=invalid-name
    # dp - —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞

    dp.register_message_handler(cmd_start, commands="start", state="*")
    dp.register_message_handler(cmd_support, commands="support", state="*")
    dp.register_message_handler(cmd_dev, commands="dev", state="*")
    dp.register_message_handler(cmd_cancel, commands="cancel", state="*")
    dp.register_message_handler(cmd_cancel, Text(
        equals="–æ—Ç–º–µ–Ω–∞", ignore_case=True), state="*")
    dp.register_message_handler(msg_any)
