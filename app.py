# School Diary Robot by xhable
# v6, added a parser for university schedule (BSTU)
# Now you must put your bot's token into config vars. (they're getting here by os.environ())

from site_parser import get_schedule, get_groups, get_state, set_state, get_group, set_group
from prettytable import PrettyTable
from telebot import types, apihelper
from flask import Flask, request
from pymongo import MongoClient
from transliterate import translit
import telebot
import datetime
import wdays
import os
import re

MONGODB_URI = os.environ['MONGODB_URI']
client = MongoClient(host=MONGODB_URI, retryWrites=False) 
db = client.heroku_38n7vrr9
users = db.users

building_1 = 'https://telegra.ph/file/49ec8634ab340fa384787.png'
building_2 = 'https://telegra.ph/file/7d04458ac4230fd12f064.png'
building_3 = 'https://telegra.ph/file/6b801965b5771830b67f0.png'
building_4 = 'https://telegra.ph/file/f79c20324a0ba6cd88711.png'

server = Flask(__name__)
token = os.environ['token']
no = '-'
index = [i for i in range(1, 6)]

time = ['8:00-9:35', '9:45-11:20', '11:30-13:05', '13:20-14:55', '15:05-16:40']

ADMINS = [124361528]
bot = telebot.TeleBot(token, 'Markdown')


table.field_names = ['‚Ññ', '–ü–∞—Ä–∞', '–ö–∞–±–∏–Ω–µ—Ç']

table = PrettyTable()
table_r = PrettyTable()

def ru_en(text):
    """–§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π."""
    return translit(text, 'ru', reversed=True)

def en_ru(text):
    """–§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π."""
    return translit(text, 'ru', reversed=False)

@bot.message_handler(commands=["start"])
def start_handler(m):
    if users.find_one({'user_id': m.from_user.id}) == None:
        users.insert_one({
            'first_name': m.from_user.first_name,
            'last_name': m.from_user.last_name,
            'user_id': m.from_user.id,
            'username': m.from_user.username,
            'state': 'default',
            'group': '–û-20-–ò–í–¢-1-–ø–æ-–ë'
        })
    else:
        group = get_group(m.from_user.id)
        bot.send_message(m.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {m.from_user.first_name}!\n*–í—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞: {group}.*\n–í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=kbm, parse_mode='Markdown')
        set_state(m.from_user.id, 'default')

@bot.message_handler(commands=["whatis"])
def whatis(m):
    if m.chat.id in ADMINS:
        raw_text = str(m.text)
        key = raw_text.split(' ', maxsplit=1)[1]
        try:
            value = globals()[f'{key}']
            bot.send_message(m.chat.id, f'–°–µ–π—á–∞—Å `{key}` == `{value}`', parse_mode='Markdown')
        except KeyError:
            bot.send_message(m.chat.id, f'–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è `{key}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', parse_mode='Markdown')

@bot.message_handler(commands=["users_reset"])
def users_reset(m):
    if m.chat.id in ADMINS:
        for user in users.find():
            user_id = user['user_id']
            state = 'default'
            group = '–û-20-–ò–í–¢-1-–ø–æ-–ë'
            set_state(user_id, state)
            set_group(user_id, group)
        bot.send_message(m.chat.id, f'–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã!\n\n–°–æ—Å—Ç–æ—è–Ω–∏–µ = {state}\n–ì—Ä—É–ø–ø–∞ = {group}')

@bot.message_handler(commands=["users"])
def users_handler(m):
    if m.chat.id in ADMINS:
        text = '*–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:*\n\n'
        for user in users.find():
            first_name = user['first_name']
            last_name = user['last_name']
            user_id = user['user_id']
            group = user['group']
            if last_name != None:
                text += f'[{first_name} {last_name}](tg://user?id={user_id}) ‚óº *–ì—Ä—É–ø–ø–∞ ‚Ññ{group}*\n'
            else:
                text += f'[{first_name}](tg://user?id={user_id}) ‚óº *–ì—Ä—É–ø–ø–∞ ‚Ññ{group}*\n'
        bot.send_message(m.chat.id, text, parse_mode='Markdown')

@bot.message_handler(commands=["broadcast"])
def broadcast(m):
    if m.chat.id in ADMINS:
        raw_text = str(m.text)
        group = raw_text.split(' ', maxsplit=2)[1]
        text = raw_text.split(' ', maxsplit=2)[2]
        if group == 'all':
            text = f'üîî *–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø –ò–í–¢!*\n' + text
            for user in users.find():
                user_id = user['user_id']
                bot.send_message(user_id, text, parse_mode='Markdown')
        else:
            text = f'üîî *–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}!*\n' + text
            for user in users.find({'group': group}):
                user_id = user['user_id']
                bot.send_message(user_id, text, parse_mode='Markdown')

@bot.message_handler(commands=["exec"])
def execute(m):
    if m.chat.id in ADMINS:
        raw_text = str(m.text)
        cmd = raw_text.split(' ', maxsplit=1)[1]
        try:
            exec(cmd)
            bot.send_message(m.chat.id, f'{cmd} - —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!')
        except Exception as e:
            bot.send_message(m.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n\n`{e}`')

# –ë–ª–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –±–æ—Ç–∞
kbm = types.InlineKeyboardMarkup()
kbm.row(types.InlineKeyboardButton(text='üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º', callback_data='days'))
kbm.row(types.InlineKeyboardButton(text='‚ö°Ô∏è –°–µ–≥–æ–¥–Ω—è', callback_data='today'), types.InlineKeyboardButton(text='‚ö°Ô∏è –ó–∞–≤—Ç—Ä–∞', callback_data='tomorrow'))
kbm.row(types.InlineKeyboardButton(text='üîî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä', callback_data='rings'))
kbm.row(types.InlineKeyboardButton(text='üè† –ù–∞–π—Ç–∏ –∫–æ—Ä–ø—É—Å –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏–∏', callback_data='building'))
kbm.row(types.InlineKeyboardButton(text='üîÇ –°–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã', callback_data='change_group'))

kb_r = types.InlineKeyboardMarkup()
kb_r.row(types.InlineKeyboardButton(text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', callback_data='r_monday'))
kb_r.row(types.InlineKeyboardButton(text='–û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–Ω–∏', callback_data='r_others'))
kb_r.row(types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='tomain'))

kb_dn = types.InlineKeyboardMarkup()
kb_dn.row(types.InlineKeyboardButton(text='1Ô∏è‚É£ –ü–Ω', callback_data='wday_monday'),
types.InlineKeyboardButton(text='2Ô∏è‚É£ –í—Ç', callback_data='wday_tuesday'),
types.InlineKeyboardButton(text='3Ô∏è‚É£ –°—Ä', callback_data='wday_wednesday'))
kb_dn.row(types.InlineKeyboardButton(text='4Ô∏è‚É£ –ß—Ç', callback_data='wday_thursday'),
types.InlineKeyboardButton(text='5Ô∏è‚É£ –ü—Ç', callback_data='wday_friday'))
kb_dn.row(types.InlineKeyboardButton(text='üîÑ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='tomain'))

kbb = types.InlineKeyboardMarkup()
kbb.row(types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='days'))

kbbb = types.InlineKeyboardMarkup()
kbbb.row(types.InlineKeyboardButton(text='üîÑ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='tomain'))

kb_cancel_building = types.InlineKeyboardMarkup()
kb_cancel_building.row(types.InlineKeyboardButton(text='üö´ –û—Ç–º–µ–Ω–∞', callback_data='cancel_find_class'))

#kb_group = types.InlineKeyboardMarkup()
#kb_group.row(types.InlineKeyboardButton(text='1Ô∏è‚É£', callback_data='group_1'), types.InlineKeyboardButton(text='2Ô∏è‚É£', callback_data='group_2'))
#kb_group.row(types.InlineKeyboardButton(text='üö´ –û—Ç–º–µ–Ω–∞', callback_data='cancel_find_class'))

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(content_types=["text"])
def anymess(m):
    if users.find_one({'user_id': m.from_user.id}) == None:
        bot.send_message(m.chat.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
    elif users.find_one({'user_id': m.from_user.id}) != None and get_state(m.from_user.id) == 'default':
        group = get_group(m.from_user.id)
        bot.send_message(m.chat.id, text=f'–ü—Ä–∏–≤–µ—Ç, {m.from_user.first_name}!\n*–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ ‚Ññ{group}.*\n–í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=kbm, parse_mode='Markdown')
    elif get_state(m.from_user.id) == 'find_class':
        if re.match(r'(\b[1-9][1-9]\b|\b[1-9]\b)', m.text):
            bot.send_photo(m.chat.id, photo=building_1, caption=f'–ê—É–¥–∏—Ç–æ—Ä–∏—è {m.text} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–ø—É—Å–µ ‚Ññ1 _(–ò–Ω—Å—Ç–∏—Ç—É—Ç—Å–∫–∞—è, 16)_.', parse_mode='Markdown')
            bot.send_location(m.chat.id, latitude=53.305077, longitude=34.305080)
            set_state(m.chat.id, 'default')
            group = get_group(m.from_user.id)
            bot.send_message(m.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {m.from_user.first_name}!\n*–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ ‚Ññ{group}.*\n–í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=kbm, parse_mode='Markdown')
        elif re.match(r'\b[1-9][0-9][0-9]\b', m.text):
            bot.send_photo(m.chat.id, photo=building_2, caption=f'–ê—É–¥–∏—Ç–æ—Ä–∏—è {m.text} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–ø—É—Å–µ ‚Ññ2 _(–±—É–ª—å–≤–∞—Ä 50 –ª–µ—Ç –û–∫—Ç—è–±—Ä—è, 7)_.', parse_mode='Markdown')
            bot.send_location(m.chat.id, latitude=53.304442, longitude=34.303849)
            set_state(m.chat.id, 'default')
            group = get_group(m.from_user.id)
            bot.send_message(m.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {m.from_user.first_name}!\n*–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ ‚Ññ{group}.*\n–í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=kbm, parse_mode='Markdown')
        elif re.match(r'(\b–ê\d{3}\b|\b[–ê–∞]\b|\b[–ë–±]\b|\b[–í–≤]\b|\b[–ì–≥]\b|\b[–î–¥]\b)', m.text):
            bot.send_photo(m.chat.id, photo=building_3, caption=f'–ê—É–¥–∏—Ç–æ—Ä–∏—è {m.text} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–ø—É—Å–µ ‚Ññ3 _(–•–∞—Ä—å–∫–æ–≤—Å–∫–∞—è, 8)_.', parse_mode='Markdown')
            bot.send_location(m.chat.id, latitude=53.304991, longitude=34.306688)
            set_state(m.chat.id, 'default')
            group = get_group(m.from_user.id)
            bot.send_message(m.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {m.from_user.first_name}!\n*–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ ‚Ññ{group}.*\n–í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=kbm, parse_mode='Markdown')
        elif re.match(r'\b–ë\d{3}\b', m.text):
            bot.send_photo(m.chat.id, photo=building_4, caption=f'–ê—É–¥–∏—Ç–æ—Ä–∏—è {m.text} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–ø—É—Å–µ ‚Ññ4 _(–•–∞—Ä—å–∫–æ–≤—Å–∫–∞—è, 10–ë)_.', parse_mode='Markdown')
            bot.send_location(m.chat.id, latitude=53.303513, longitude=34.305085)
            set_state(m.chat.id, 'default')
            group = get_group(m.from_user.id)
            bot.send_message(m.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {m.from_user.first_name}!\n*–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ ‚Ññ{group}.*\n–í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=kbm, parse_mode='Markdown')
        else:
            bot.send_message(m.chat.id, '–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb_cancel_building)
    elif get_group(m.from_user.id) != 1 and get_group(m.from_user.id) != 2:
        set_group(m.from_user.id, 1)

# –•—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def button_func(call):
    if call.data == 'days':
        bot.edit_message_text(chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:',
        reply_markup=kb_dn)
    elif call.data[:5] == 'wday_':
        group = get_group(call.from_user.id)
        weekday = call.data[5:]
        
        if datetime.datetime.today().isocalendar()[1] % 2 == 0:
            weeknum = '1'
        else:
            weeknum = '2'
        
        schedule = get_schedule(group, weekday, weeknum)

        for lesson in schedule:
            table.add_row(lesson)
        
        bot.edit_message_text(chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f'*–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ ‚Ññ{group}*\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {wdays.translate(weekday)}\n\n```{table}```\n\n`[–õ]` - *–ª–µ–∫—Ü–∏—è*\n`[–ü–ó]` - *–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ*\n`[–õ–ê–ë]` - *–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ*',
        reply_markup=kbb, parse_mode='Markdown')

        table.clear()
    elif call.data == 'today':
        group = get_group(call.from_user.id)
        isoweekday = datetime.datetime.today().isoweekday()
        weekday = wdays.names(isoweekday)[1]

        if datetime.datetime.today().isocalendar()[1] % 2 == 0:
            weeknum = '1'
        else:
            weeknum = '2'
        
        schedule = get_schedule(group, weekday, weeknum)
        
        for lesson in schedule:
            table.add_row(lesson)
        
        if isoweekday == 6 or isoweekday == 7:
            text = f'–°–µ–≥–æ–¥–Ω—è: {wdays.names(isoweekday)[0]}\n\n–£–¥–∞—á–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö!'
        else:
            text = f'*–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ ‚Ññ{group}*\n–°–µ–≥–æ–¥–Ω—è: {wdays.names(isoweekday)[0]}\n\n```{table}```\n\n`[–õ]` - *–ª–µ–∫—Ü–∏—è*\n`[–ü–ó]` - *–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ*\n`[–õ–ê–ë]` - *–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ*'

        bot.edit_message_text(chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text, reply_markup=kbbb, parse_mode='Markdown')

        table.clear()
    elif call.data == 'rings':
        table_r.clear()
        table_r.add_column(fieldname="‚Ññ", column=index)
        table_r.add_column(fieldname="–í—Ä–µ–º—è", column=time)
        text = f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä\n\n```{table_r}```'
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text,
        reply_markup=kbbb, parse_mode='Markdown')
    elif call.data == 'tomorrow':
        group = get_group(call.from_user.id)
        isoweekday = datetime.datetime.today().isoweekday() + 1
        weekday = wdays.names(isoweekday)[1]

        if datetime.datetime.today().isocalendar()[1] % 2 == 0:
            weeknum = '1'
        else:
            weeknum = '2'
        
        schedule = get_schedule(group, weekday, weeknum)

        for lesson in schedule:
            table.add_row(lesson)
        
        if isoweekday == 6 or isoweekday == 7:
            text = f'*–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ ‚Ññ{group}*\n–ó–∞–≤—Ç—Ä–∞: {wdays.names(isoweekday)[0]}\n\n–£–¥–∞—á–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö!'
        else:
            text = f'*–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ ‚Ññ{group}*\n–ó–∞–≤—Ç—Ä–∞: {wdays.names(isoweekday)[0]}\n\n```{table}```\n\n`[–õ]` - *–ª–µ–∫—Ü–∏—è*\n`[–ü–ó]` - *–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ*\n`[–õ–ê–ë]` - *–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ*'

        bot.edit_message_text(chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text,
        reply_markup=kbbb, parse_mode='Markdown')

        table.clear()
    elif call.data == 'tomain':
        bot.edit_message_text(chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f'–ü—Ä–∏–≤–µ—Ç, {call.from_user.first_name}!\n*–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ ‚Ññ{get_group(call.from_user.id)}.*\n–í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
        reply_markup=kbm, parse_mode='Markdown')
    elif call.data == 'building':
        set_state(call.from_user.id, 'find_class')
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏:', reply_markup=kb_cancel_building, parse_mode='Markdown')
    elif call.data == 'cancel_find_class':
        set_state(call.from_user.id, 'default')
        bot.edit_message_text(chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f'–ü—Ä–∏–≤–µ—Ç, {call.from_user.first_name}!\n*–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ ‚Ññ{get_group(call.from_user.id)}.*\n–í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
        reply_markup=kbm, parse_mode='Markdown')
    elif call.data == 'change_group':
        group_list = get_groups()
        kb_group = types.InlineKeyboardMarkup()

        for group in group_list:
            kb_group.row(types.InlineKeyboardButton(text=group, callback_data=ru_en(group)))

        bot.edit_message_text(chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f'–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:',
        reply_markup=kb_group, parse_mode='Markdown')
    elif str(call.data).startswith('O-20'):
        group = en_ru(str(call.data))
        set_group(call.from_user.id, group)
        bot.edit_message_text(chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f'–ü—Ä–∏–≤–µ—Ç, {call.from_user.first_name}!\n*–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ ‚Ññ{get_group(call.from_user.id)}.*\n–í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
        reply_markup=kbm, parse_mode='Markdown')


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º

@server.route('/' + token, methods=['POST'])
def getMessage():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "!", 200


@server.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url='https://dnevnikxhb.herokuapp.com/' + token)
    return "!", 200


if __name__ == "__main__":
    server.run(host="0.0.0.0", port=int(os.environ.get('PORT', '8443')))