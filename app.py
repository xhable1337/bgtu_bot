# School Diary Robot by xhable
# v3, added university schedule (BSTU)
# Now you must put your bot's token into config vars. (they're getting here by os.environ())
import telebot
from prettytable import PrettyTable
from telebot import types, apihelper
import datetime
import wdays
from flask import Flask, request
import os
from pymongo import MongoClient

MONGODB_URI = os.environ['MONGODB_URI']
client = MongoClient(host=MONGODB_URI, retryWrites=False) 
db = client.heroku_38n7vrr9
users = db.users

server = Flask(__name__)
token = os.environ['token']
no = '-'
index = [1, 2, 3, 4, 5]
wday_monday_1 = ['[–ü–ó] –ò–Ω.—è–∑.', '[–õ] –ú–∞—Ç.–∞–Ω–∞–ª–∏–∑', '[–ü–ó] –ú–∞—Ç.–∞–Ω–∞–ª–∏–∑', '[–ü–ó] –ò–Ω.—è–∑.', no, [322, '–ê', '–ë204', 322, no]]
wday_monday_2 = ['[–õ] –§–∏–∑-—Ä–∞', '[–õ] –ú–∞—Ç.–∞–Ω–∞–ª–∏–∑', '[–ü–ó] –ú–∞—Ç.–∞–Ω–∞–ª–∏–∑', '[–ü–ó] –ò–Ω.—è–∑.', no, ['–ë404', '–ê', '–ë204', 322, no]]
wday_tuesday_1 = ['[–õ] –î–∏—Å–∫—Ä.–º–∞—Ç.', '[–ü–ó] –î–∏—Å–∫—Ä.–º–∞—Ç.', '[–õ] –ü—Ä–æ–≥—Ä–∞–º.', no, no, ['B', '–ë204', 219, no, no]]
wday_tuesday_2 = ['[–õ] –ò–Ω—Ñ–æ—Ä–º–∞—Ç.', '[–ü–ó] –î–∏—Å–∫—Ä.–º–∞—Ç.', '[–õ] –ü—Ä–æ–≥—Ä–∞–º.', no, no, [219, '–ë204', 219, no, no]]
wday_wednesday = [no, '[–õ] –ê–ª–≥. –∏ –≥–µ–æ–º.', '[–ü–ó] –§–∏–∑-—Ä–∞', no, no, [no, 'A', '—Å–ø–æ—Ä—Ç–∑–∞–ª', no, no]]
wday_thursday_1 = [no, '[–õ–ê–ë] –ü—Ä–æ–≥—Ä–∞–º.', '[–ü–ó] –ò–Ω.—è–∑.', no, no, [no, 408, 322, no, no]]
wday_thursday_2 = [no, '[–õ–ê–ë] –ü—Ä–æ–≥—Ä–∞–º.', '[–ü–ó] –ò–Ω.—è–∑.', '[–ü–ó] –ò–Ω. —è–∑.', no, [no, 408, 322, 322, no]]
wday_friday_1 = ['[–ü–ó] –ê–ª–≥. –∏ –≥–µ–æ–º.', '[–õ] –ü–µ–¥. –∏ –ø—Å–∏—Ö.', '[–ü–ó] –ü–µ–¥. –∏ –ø—Å–∏—Ö.', no, no, ['–ë204', '–ë', '–ê211', no, no]]
wday_friday_2 = ['[–ü–ó] –ê–ª–≥. –∏ –≥–µ–æ–º.', '[–õ–ê–ë] –ò–Ω—Ñ–æ—Ä–º–∞—Ç.', '[–ü–ó] –ü–µ–¥. –∏ –ø—Å–∏—Ö.', no, no, ['–ë204', 408, '–ê211', no, no]]

time = ['8:00-9:35', '9:45-11:20', '11:30-13:05', '13:20-14:55', '15:05-16:40']

ADMINS = [124361528]
bot = telebot.TeleBot(token)
table = PrettyTable()
table_r = PrettyTable()

@bot.message_handler(commands=["start"])
def start_handler(m):
    if users.find_one({'user_id': m.from_user.id}) == None:
        users.insert_one({
            'first_name': m.from_user.first_name,
            'last_name': m.from_user.last_name,
            'user_id': m.from_user.id,
            'username': m.from_user.username,
        })
    else:
        bot.send_message(m.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {m.from_user.first_name}!\n–í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=kbm)

@bot.message_handler(commands=["whatis"])
def whatis(m):
    if m.chat.id in ADMINS:
        raw_text = str(m.text)
        key = raw_text.split(' ', maxsplit=1)[1]
        try:
            value = globals()[f'{key}']
            bot.send_message(m.chat.id, f'–°–µ–π—á–∞—Å `{key}` == `{value}`', parse_mode='Markdown')
        except KeyError:
            bot.send_message(m.chat.id, f'–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è `{key}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', parse_mode='Markdown')



@bot.message_handler(commands=["users"])
def users_handler(m):
    text = '*–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:*\n\n'
    for user in users.find():
        first_name = user['first_name']
        last_name = user['last_name']
        user_id = user['user_id']
        if last_name != None:
            text += f'[{first_name} {last_name}](tg://user?id={user_id})\n'
        else:
            text += f'[{first_name}](tg://user?id={user_id})\n'
    bot.send_message(m.chat.id, text, parse_mode='Markdown')

@bot.message_handler(commands=["broadcast"])
def broadcast(m):
    if m.chat.id in ADMINS:
        raw_text = str(m.text)
        text = raw_text.split(' ', maxsplit=1)[1]
        for user in users.find():
            user_id = user['user_id']
            bot.send_message(user_id, text)

@bot.message_handler(commands=["exec"])
def execute(m):
    if m.chat.id in ADMINS:
        raw_text = str(m.text)
        cmd = raw_text.split(' ', maxsplit=1)[1]
        try:
            exec(cmd)
            bot.send_message(m.chat.id, f'{cmd} - —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!')
        except Exception as e:
            bot.send_message(m.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n\n`{e}`')

kbm = types.InlineKeyboardMarkup()
kbm.row(types.InlineKeyboardButton(text='üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º', callback_data='days'))
kbm.row(types.InlineKeyboardButton(text='‚ö°Ô∏è –°–µ–≥–æ–¥–Ω—è', callback_data='today'), types.InlineKeyboardButton(text='‚ö°Ô∏è –ó–∞–≤—Ç—Ä–∞', callback_data='tomorrow'))
kbm.row(types.InlineKeyboardButton(text='üîî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä', callback_data='rings'))

kb_r = types.InlineKeyboardMarkup()
kb_r.row(types.InlineKeyboardButton(text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', callback_data='r_monday'))
kb_r.row(types.InlineKeyboardButton(text='–û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–Ω–∏', callback_data='r_others'))
kb_r.row(types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='tomain'))

kb_dn = types.InlineKeyboardMarkup()
kb_dn.row(types.InlineKeyboardButton(text='1Ô∏è‚É£ –ü–Ω', callback_data='wday_monday'),
types.InlineKeyboardButton(text='2Ô∏è‚É£ –í—Ç', callback_data='wday_tuesday'),
types.InlineKeyboardButton(text='3Ô∏è‚É£ –°—Ä', callback_data='wday_wednesday'))
kb_dn.row(types.InlineKeyboardButton(text='4Ô∏è‚É£ –ß—Ç', callback_data='wday_thursday'),
types.InlineKeyboardButton(text='5Ô∏è‚É£ –ü—Ç', callback_data='wday_friday'))
kb_dn.row(types.InlineKeyboardButton(text='üîÑ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='tomain'))

kbb = types.InlineKeyboardMarkup()
kbb.row(types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='days'))

kbbb = types.InlineKeyboardMarkup()
kbbb.row(types.InlineKeyboardButton(text='üîÑ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='tomain'))

@bot.message_handler(content_types=["text"])
def anymess(m):
    if users.find_one({'user_id': m.from_user.id}) == None:
        bot.send_message(m.chat.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
    else:
        bot.send_message(m.chat.id, text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=kbm)

@bot.callback_query_handler(func=lambda call: True)
def button_func(call):
    if call.data == 'days':
        bot.edit_message_text(chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:',
        reply_markup=kb_dn)
    elif call.data[:5] == 'wday_':
        cdata = str(call.data)
        table.clear()
        if datetime.datetime.today().isocalendar()[1] % 2 == 0:
            lesson = globals()[f'{cdata}_1'][0:5]
            room = globals()[f'{cdata}_1'][5]
        else:
            lesson = globals()[f'{cdata}_2'][0:5]
            room = globals()[f'{cdata}_2'][5]
        table.add_column(fieldname="‚Ññ", column=index)
        table.add_column(fieldname="–ü–∞—Ä–∞", column=lesson)
        table.add_column(fieldname="–ö–∞–±–∏–Ω–µ—Ç", column=room)
        bot.edit_message_text(chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {wdays.translate(cdata[5:])}\n\n```{table}```\n\n–õ - –ª–µ–∫—Ü–∏—è\n–ü–ó - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ\n–õ–ê–ë - –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ',
        reply_markup=kbb, parse_mode='Markdown')
    elif call.data == 'today':
        wd = datetime.datetime.today().isoweekday()
        table.clear()
        if datetime.datetime.today().isocalendar()[1] % 2 == 0:
            lesson = globals()[f'wday_{wdays.names(wd)[1]}_1'][0:5]
            room = globals()[f'wday_{wdays.names(wd)[1]}_1'][5]
        else:
            lesson = globals()[f'wday_{wdays.names(wd)[1]}_2'][0:5]
            room = globals()[f'wday_{wdays.names(wd)[1]}_2'][5]
        table.add_column(fieldname="‚Ññ", column=index)
        table.add_column(fieldname="–ü–∞—Ä–∞", column=lesson)
        table.add_column(fieldname="–ö–∞–±–∏–Ω–µ—Ç", column=room)
        if wd == 6 or wd == 7:
            text = f'–°–µ–≥–æ–¥–Ω—è: {wdays.names(wd)[0]}\n\n–£–¥–∞—á–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö!'
        else:
            text = f'–°–µ–≥–æ–¥–Ω—è: {wdays.names(wd)[0]}\n\n```{table}```\n\n–õ - –ª–µ–∫—Ü–∏—è\n–ü–ó - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ\n–õ–ê–ë - –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'
        bot.edit_message_text(chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text, reply_markup=kbbb, parse_mode='Markdown')
    elif call.data == 'rings':
        table_r.clear()
        table_r.add_column(fieldname="‚Ññ", column=index)
        table_r.add_column(fieldname="–í—Ä–µ–º—è", column=time)
        text = f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä\n\n```{table_r}```'
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text,
        reply_markup=kbbb, parse_mode='Markdown')
    elif call.data == 'tomorrow':
        wd = datetime.datetime.today().isoweekday()
        table.clear()
        if datetime.datetime.today().isocalendar()[1] % 2 == 0:
            lesson = globals()[f'wday_{wdays.names(wd+1)[1]}_1'][0:5]
            room = globals()[f'wday_{wdays.names(wd+1)[1]}_1'][5]
        else:
            lesson = globals()[f'wday_{wdays.names(wd+1)[1]}_2'][0:5]
            room = globals()[f'wday_{wdays.names(wd+1)[1]}_2'][5]
        table.add_column(fieldname="‚Ññ", column=index)
        table.add_column(fieldname="–ü–∞—Ä–∞", column=lesson)
        table.add_column(fieldname="–ö–∞–±–∏–Ω–µ—Ç", column=room)
        if wd == 5 or wd == 6:
            text = f'–ó–∞–≤—Ç—Ä–∞: {wdays.names(wd+1)[0]}\n\n–£–¥–∞—á–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö!'
        else:
            text = f'–ó–∞–≤—Ç—Ä–∞: {wdays.names(wd+1)[0]}\n\n```{table}```\n\n–õ - –ª–µ–∫—Ü–∏—è\n–ü–ó - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ\n–õ–ê–ë - –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'
        bot.edit_message_text(chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text,
        reply_markup=kbbb, parse_mode='Markdown')
    elif call.data == 'tomain':
        bot.edit_message_text(chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=kbm, parse_mode='Markdown')



@server.route('/' + token, methods=['POST'])
def getMessage():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "!", 200


@server.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url='https://dnevnikxhb.herokuapp.com/' + token)
    return "!", 200


if __name__ == "__main__":
    server.run(host="0.0.0.0", port=int(os.environ.get('PORT', '8443')))